// Code generated by templ@v0.2.364 DO NOT EDIT.

package html

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"

	"github.com/raphi011/handoff/internal/model"
)

func RenderTestRun(tr model.TestRun) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html><head><meta charset=\"utf-8\"></head><body><h1>")
		if err != nil {
			return err
		}
		var var_2 string = tr.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><h2>")
		if err != nil {
			return err
		}
		var_3 := `Logs`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><code>")
		if err != nil {
			return err
		}
		var var_4 string = tr.Logs
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</code></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func RenderTestSuiteRun(tsr model.TestSuiteRun) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html><head><meta charset=\"utf-8\"></head><body><h1>")
		if err != nil {
			return err
		}
		var var_6 string = tsr.SuiteName
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><p>")
		if err != nil {
			return err
		}
		var_7 := `Started at `
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		var var_8 string = tsr.Start.Format("02.01 15:04:05")
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		var_9 := `, took `
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		var var_10 string = fmt.Sprintf("%d", tsr.DurationInMS)
		_, err = templBuffer.WriteString(templ.EscapeString(var_10))
		if err != nil {
			return err
		}
		var_11 := `ms to finish.`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><p>")
		if err != nil {
			return err
		}
		var_12 := `Is flaky: `
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		var var_13 string = fmt.Sprintf("%t", tsr.Flaky)
		_, err = templBuffer.WriteString(templ.EscapeString(var_13))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><table><tr><th>")
		if err != nil {
			return err
		}
		var_14 := `Name`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var_15 := `Passed`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th style=\"text-align: right\">")
		if err != nil {
			return err
		}
		var_16 := `Duration`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></tr>")
		if err != nil {
			return err
		}
		for _, tr := range tsr.TestResults {
			_, err = templBuffer.WriteString("<tr><td><a href=\"")
			if err != nil {
				return err
			}
			var var_17 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs/%d/test/%s", tr.SuiteName, tsr.ID, tr.Name))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_17)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_18 string = tr.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_18))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></td><td>")
			if err != nil {
				return err
			}
			if tr.Result == "passed" {
				var_19 := `✅`
				_, err = templBuffer.WriteString(var_19)
				if err != nil {
					return err
				}
			} else {
				var_20 := `❌`
				_, err = templBuffer.WriteString(var_20)
				if err != nil {
					return err
				}
			}
			if tr.SoftFailure {
				var_21 := `"(soft failure)"`
				_, err = templBuffer.WriteString(var_21)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</td><td style=\"text-align: right\">")
			if err != nil {
				return err
			}
			var var_22 string = fmt.Sprintf("%dms", tr.DurationInMS)
			_, err = templBuffer.WriteString(templ.EscapeString(var_22))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td></tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</table></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func RenderTestSuiteRuns(runs []model.TestSuiteRun) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_23 := templ.GetChildren(ctx)
		if var_23 == nil {
			var_23 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html><head></head><body><h1>")
		if err != nil {
			return err
		}
		var_24 := `Testruns`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><ul>")
		if err != nil {
			return err
		}
		for _, tsr := range runs {
			_, err = templBuffer.WriteString("<li><a href=\"")
			if err != nil {
				return err
			}
			var var_25 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs/%d", tsr.SuiteName, tsr.ID))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_25)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_26 string = tsr.SuiteName
			_, err = templBuffer.WriteString(templ.EscapeString(var_26))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_27 := `(#`
			_, err = templBuffer.WriteString(var_27)
			if err != nil {
				return err
			}
			var var_28 string = fmt.Sprintf("%d", tsr.ID)
			_, err = templBuffer.WriteString(templ.EscapeString(var_28))
			if err != nil {
				return err
			}
			var_29 := `): `
			_, err = templBuffer.WriteString(var_29)
			if err != nil {
				return err
			}
			var var_30 string = string(tsr.Result)
			_, err = templBuffer.WriteString(templ.EscapeString(var_30))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></li>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</ul></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func RenderTestSuites(suites []model.TestSuite) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_31 := templ.GetChildren(ctx)
		if var_31 == nil {
			var_31 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html><head></head><body><h1>")
		if err != nil {
			return err
		}
		var_32 := `Test suites`
		_, err = templBuffer.WriteString(var_32)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><ul>")
		if err != nil {
			return err
		}
		for _, ts := range suites {
			_, err = templBuffer.WriteString("<li><a href=\"")
			if err != nil {
				return err
			}
			var var_33 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs", ts.Name))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_33)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_34 string = ts.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_34))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></li>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</ul></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
