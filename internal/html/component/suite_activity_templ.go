// Code generated by templ@v0.2.364 DO NOT EDIT.

package component

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/raphi011/handoff/internal/html/util"
	"github.com/raphi011/handoff/internal/model"
)

func SuiteActivity(runs []model.TestSuiteRun) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flow-root\"><ul role=\"list\" class=\"-mb-8\">")
		if err != nil {
			return err
		}
		for _, run := range runs {
			_, err = templBuffer.WriteString("<li><div class=\"relative pb-8\"><span class=\"absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200\" aria-hidden=\"true\"></span><div class=\"relative flex space-x-3\">")
			if err != nil {
				return err
			}
			switch run.Result {
			case model.ResultFailed:
				_, err = templBuffer.WriteString("<div><span class=\"flex size-8 items-center justify-center rounded-full bg-red-500 ring-8 ring-white\"><svg class=\"size-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" data-slot=\"icon\"><path fill-rule=\"evenodd\" d=\"M6.293 6.293a1 1 0 011.414 0L10 8.586l2.293-2.293a1 1 0 111.414 1.414L11.414 10l2.293 2.293a1 1 0 01-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 01-1.414-1.414L8.586 10 6.293 7.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg></span></div> <div class=\"flex min-w-0 flex-1 justify-between space-x-4 pt-1.5\"><div><p class=\"text-sm text-gray-500\"><a href=\"")
				if err != nil {
					return err
				}
				var var_2 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs/%d", run.SuiteName, run.ID))
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_2)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" class=\"font-medium text-gray-900\">")
				if err != nil {
					return err
				}
				var_3 := `Test Run `
				_, err = templBuffer.WriteString(var_3)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_4 string = fmt.Sprintf("%d", run.ID)
				_, err = templBuffer.WriteString(templ.EscapeString(var_4))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b> ")
				if err != nil {
					return err
				}
				var_5 := `failed for `
				_, err = templBuffer.WriteString(var_5)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_6 string = run.SuiteName
				_, err = templBuffer.WriteString(templ.EscapeString(var_6))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b></a></p></div><div class=\"whitespace-nowrap text-right text-sm text-gray-500\"><time datetime=\"2020-09-28\">")
				if err != nil {
					return err
				}
				var var_7 string = util.FormatRelativeTime(run.End)
				_, err = templBuffer.WriteString(templ.EscapeString(var_7))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</time></div></div>")
				if err != nil {
					return err
				}
			case model.ResultPassed:
				_, err = templBuffer.WriteString("<div><span class=\"flex size-8 items-center justify-center rounded-full bg-green-500 ring-8 ring-white\"><svg class=\"size-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" data-slot=\"icon\"><path fill-rule=\"evenodd\" d=\"M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z\" clip-rule=\"evenodd\"></path></svg></span></div> <div class=\"flex min-w-0 flex-1 justify-between space-x-4 pt-1.5\"><div><p class=\"text-sm text-gray-500\"><a href=\"")
				if err != nil {
					return err
				}
				var var_8 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs/%d", run.SuiteName, run.ID))
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_8)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" class=\"font-medium text-gray-900\">")
				if err != nil {
					return err
				}
				var_9 := `Test Run `
				_, err = templBuffer.WriteString(var_9)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_10 string = fmt.Sprintf("%d", run.ID)
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b> ")
				if err != nil {
					return err
				}
				var_11 := `passed for `
				_, err = templBuffer.WriteString(var_11)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_12 string = run.SuiteName
				_, err = templBuffer.WriteString(templ.EscapeString(var_12))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b></a></p></div><div class=\"whitespace-nowrap text-right text-sm text-gray-500\"><time datetime=\"2020-09-28\">")
				if err != nil {
					return err
				}
				var var_13 string = util.FormatRelativeTime(run.End)
				_, err = templBuffer.WriteString(templ.EscapeString(var_13))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</time></div></div>")
				if err != nil {
					return err
				}
			case model.ResultPending:
				_, err = templBuffer.WriteString("<div><span class=\"flex size-8 items-center justify-center rounded-full bg-yellow-500 ring-8 ring-white\"><svg class=\"size-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" data-slot=\"icon\"><path d=\"M6 10a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm5 0a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm5 0a1.5 1.5 0 100-3 1.5 1.5 0 000 3z\"></path></svg></span></div> <div class=\"flex min-w-0 flex-1 justify-between space-x-4 pt-1.5\"><div><p class=\"text-sm text-gray-500\"><a href=\"")
				if err != nil {
					return err
				}
				var var_14 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs", run.SuiteName))
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_14)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" class=\"font-medium text-gray-900\">")
				if err != nil {
					return err
				}
				var_15 := `Test Run `
				_, err = templBuffer.WriteString(var_15)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_16 string = fmt.Sprintf("%d", run.ID)
				_, err = templBuffer.WriteString(templ.EscapeString(var_16))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b> ")
				if err != nil {
					return err
				}
				var_17 := `pending for `
				_, err = templBuffer.WriteString(var_17)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_18 string = run.SuiteName
				_, err = templBuffer.WriteString(templ.EscapeString(var_18))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b></a></p></div><div class=\"whitespace-nowrap text-right text-sm text-gray-500\"><time datetime=\"2020-09-28\">")
				if err != nil {
					return err
				}
				var var_19 string = util.FormatRelativeTime(run.End)
				_, err = templBuffer.WriteString(templ.EscapeString(var_19))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</time></div></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div></div></li>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</ul></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
