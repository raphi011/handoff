// Code generated by templ@v0.2.364 DO NOT EDIT.

package component

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/raphi011/handoff/internal/html/util"
	"github.com/raphi011/handoff/internal/model"
	"sort"
)

func mergeRuns(suitesWithRuns []model.TestSuiteWithRuns) []model.TestSuiteRun {
	var runs []model.TestSuiteRun
	for _, suite := range suitesWithRuns {
		runs = append(runs, suite.SuiteRuns...)
	}
	sort.Slice(runs, func(i, j int) bool {
		return runs[i].Start.After(runs[j].Start)
	})
	return runs
}

func getLatestRun(runs []model.TestSuiteRun) model.TestSuiteRun {
	sort.Slice(runs, func(i, j int) bool {
		return runs[i].Start.After(runs[j].Start)
	})
	return runs[0]
}

func TestSuitesWithRuns(suitesWithRuns []model.TestSuiteWithRuns) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<main class=\"lg:pl-72\"><header class=\"flex items-center justify-between border-b border-white/5 px-4 py-4 sm:px-6 sm:py-6 lg:px-8\"><h1 class=\"text-base/7 font-semibold text-gray-900\">")
		if err != nil {
			return err
		}
		var_2 := `Test Suites`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1></header><ul role=\"list\" class=\"divide-y divide-gray/5 border-t border-b\">")
		if err != nil {
			return err
		}
		for _, suite := range suitesWithRuns {
			_, err = templBuffer.WriteString("<li class=\"relative flex items-center space-x-4 px-4 py-4 sm:px-6 lg:px-8\"><div class=\"min-w-0 flex-auto\"><div class=\"flex items-center gap-x-3\">")
			if err != nil {
				return err
			}
			if len(suite.SuiteRuns) > 0 {
				switch getLatestRun(suite.SuiteRuns).Result {
				case model.ResultFailed:
					_, err = templBuffer.WriteString("<div class=\"flex-none rounded-full bg-rose-400/10 p-1 text-rose-400\"><div class=\"size-2 rounded-full bg-current\"></div></div>")
					if err != nil {
						return err
					}
				case model.ResultPassed:
					_, err = templBuffer.WriteString("<div class=\"flex-none rounded-full bg-green-400/10 p-1 text-green-400\"><div class=\"size-2 rounded-full bg-current\"></div></div>")
					if err != nil {
						return err
					}
				case model.ResultPending:
					_, err = templBuffer.WriteString("<div class=\"flex-none rounded-full bg-gray-600/10 p-1 text-gray-500\"><div class=\"size-2 rounded-full bg-current\"></div></div>")
					if err != nil {
						return err
					}
				default:
					_, err = templBuffer.WriteString("<div class=\"flex-none rounded-full bg-gray-600/10 p-1 text-gray-500\"><div class=\"size-2 rounded-full bg-current\"></div></div>")
					if err != nil {
						return err
					}
				}
			} else {
				_, err = templBuffer.WriteString("<div class=\"flex-none rounded-full bg-gray-600/10 p-1 text-gray-500\"><div class=\"size-2 rounded-full bg-current\"></div></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("<h2 class=\"min-w-0 text-sm/6 font-semibold text-gray-500\"><a href=\"")
			if err != nil {
				return err
			}
			var var_3 templ.SafeURL = templ.URL(fmt.Sprintf("/suites/%s/runs", suite.Suite.Name))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_3)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"flex gap-x-2\"><span class=\"truncate\">")
			if err != nil {
				return err
			}
			var_4 := `Staging`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><span class=\"text-gray-400\">")
			if err != nil {
				return err
			}
			var_5 := `/`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><span class=\"whitespace-nowrap text-gray-900\">")
			if err != nil {
				return err
			}
			var var_6 string = suite.Suite.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><span class=\"absolute inset-0\"></span></a></h2></div><div class=\"mt-3 flex items-center gap-x-2.5 text-xs/5 text-gray-400\"><p class=\"truncate\">")
			if err != nil {
				return err
			}
			var var_7 string = fmt.Sprintf("%d tests in suite", len(suite.Suite.Tests))
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p>")
			if err != nil {
				return err
			}
			if len(suite.SuiteRuns) > 0 {
				_, err = templBuffer.WriteString("<svg viewBox=\"0 0 2 2\" class=\"size-0.5 flex-none fill-gray-300\"><circle cx=\"1\" cy=\"1\" r=\"1\"></circle></svg> <p class=\"whitespace-nowrap\">")
				if err != nil {
					return err
				}
				var_8 := `Last run started `
				_, err = templBuffer.WriteString(var_8)
				if err != nil {
					return err
				}
				var var_9 string = util.FormatRelativeTime(getLatestRun(suite.SuiteRuns).Start)
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div></div><!--")
			if err != nil {
				return err
			}
			var_10 := ` <div class="flex-none rounded-full bg-gray-400/10 px-2 py-1 text-xs font-medium text-gray-400 ring-1 ring-inset ring-gray-400/20">Preview</div> `
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("--><!--")
			if err != nil {
				return err
			}
			var_11 := ` <svg class="size-5 flex-none text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon"> `
			_, err = templBuffer.WriteString(var_11)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("--><!--")
			if err != nil {
				return err
			}
			var_12 := ` 	<path fill-rule="evenodd" d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"></path> `
			_, err = templBuffer.WriteString(var_12)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("--><!--")
			if err != nil {
				return err
			}
			var_13 := ` </svg> `
			_, err = templBuffer.WriteString(var_13)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("--></li>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</ul></main><aside class=\"bg-white lg:fixed lg:bottom-0 lg:right-0 lg:top-0 lg:w-2/6 lg:overflow-y-auto lg:border-l lg:border-gray/5\"><header class=\"flex items-center justify-between border-b border-white/5 px-4 py-4 sm:px-6 sm:py-6 lg:px-8\"><h2 class=\"text-base/7 font-semibold text-gray-900\">")
		if err != nil {
			return err
		}
		var_14 := `Activity`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><a href=\"#\" class=\"text-sm/6 font-semibold text-indigo-400\">")
		if err != nil {
			return err
		}
		var_15 := `View all`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></header><div class=\"divide-y divide-white/5 border-t p-5\">")
		if err != nil {
			return err
		}
		err = SuiteActivity(mergeRuns(suitesWithRuns)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></aside>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
